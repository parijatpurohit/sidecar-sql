/*
 *
 * Copyright 2015 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// Package main implements a client for Greeter service.
package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"sync"
	"time"

	pb "github.com/parijatpurohit/sidecar-sql/helloworld"
	"google.golang.org/grpc"
)

const (
	address     = "localhost:50051"
	defaultName = ""
)

func main() {
	// Set up a connection to the server.
	conn, err := grpc.Dial(address, grpc.WithInsecure(), grpc.WithBlock())
	if err != nil {
		log.Fatalf("did not connect: %v", err)
	}
	defer conn.Close()
	c := pb.NewGreeterClient(conn)

	// Contact the server and print out its response.
	name := defaultName
	if len(os.Args) > 1 {
		name = os.Args[1]
	}
	ctx := context.Background()
	startTime := time.Now()
	errCount := 0
	totalCount := 1
	const seqCount = 100
	const parallelCount = 1000
	for i := 0; i < seqCount; i++ {
		var wg sync.WaitGroup
		wg.Add(parallelCount)
		for j := 0; j < parallelCount; j++ {
			go func() {
				defer wg.Done()
				_, err := c.TestEndpoint(ctx, &pb.TestRequest{Name: name})
				if err != nil {
					errCount = errCount + 1
					fmt.Println("err here\n--------")
				}
				//totalCount = totalCount + 1
			}()
		}
		wg.Wait()
	}
	endTime := time.Now()
	log.Printf("Total time taken: %v ms, success: %v, fail: %v", ((endTime.UnixNano() - startTime.UnixNano()) / (1000 * 1000)), totalCount, errCount)

}
